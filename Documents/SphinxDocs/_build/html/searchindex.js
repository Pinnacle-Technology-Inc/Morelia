Search.setIndex({"docnames": ["BasicPodProtocol", "GetUserInput", "PodCommands", "PodDevice_8206HR", "PodDevice_8401HR", "PodPacketHandling", "SerialCommunication", "Setup_8206HR", "Setup_8401HR", "Setup_PodDevices", "Setup_PodInterface", "index", "modules"], "filenames": ["BasicPodProtocol.rst", "GetUserInput.rst", "PodCommands.rst", "PodDevice_8206HR.rst", "PodDevice_8401HR.rst", "PodPacketHandling.rst", "SerialCommunication.rst", "Setup_8206HR.rst", "Setup_8401HR.rst", "Setup_PodDevices.rst", "Setup_PodInterface.rst", "index.rst", "modules.rst"], "titles": ["BasicPodProtocol module", "GetUserInput module", "PodCommands module", "PodDevice_8206HR module", "PodDevice_8401HR module", "PodPacketHandling module", "SerialCommunication module", "Setup_8206HR module", "Setup_8401HR module", "Setup_PodDevices module", "Setup_PodInterface module", "Welcome to Python POD API\u2019s documentation!", "Modules"], "terms": {"class": [1, 2, 5, 6], "code": [1, 2, 5, 6], "userinput": [1, 12], "sourc": [1, 2, 5, 6], "base": [1, 2, 5, 6], "object": [1, 2, 5, 6], "contain": [1, 2, 5, 6], "sever": 1, "method": [1, 5], "get": [1, 2, 5, 6], "user": [1, 6], "input": 1, "pod": [1, 2, 5], "devic": [1, 2], "setup": 1, "static": [1, 2, 5, 6], "askforfloat": [1, 12], "prompt": 1, "str": [1, 2, 5, 6], "float": 1, "ask": 1, "type": [1, 2, 5, 6], "paramet": [1, 2, 5, 6], "statement": 1, "request": 1, "from": [1, 2, 5, 6], "return": [1, 2, 5, 6], "askforfloatinlist": [1, 12], "goodinput": 1, "list": [1, 2, 6], "badinputmessag": 1, "none": [1, 2, 5, 6], "exist": [1, 2, 6], "valid": 1, "option": [1, 5, 6], "error": 1, "messag": [1, 5, 6], "print": 1, "invalid": [1, 5], "i": [1, 2, 5, 6], "given": [1, 2, 5], "default": [1, 5, 6], "": [1, 2, 5, 6], "choic": 1, "askforfloatinrang": [1, 12], "minimum": 1, "maximum": 1, "thisi": 1, "unit": 1, "an": [1, 2, 5, 6], "valu": [1, 2, 5], "fall": 1, "rang": [1, 5], "descript": 1, "what": 1, "being": 1, "us": [1, 2, 5, 6], "when": [1, 2], "askforinput": [1, 12], "append": [1, 6], "Will": 1, "colon": 1, "end": [1, 5, 6], "string": [1, 2, 5, 6], "askforint": [1, 12], "int": [1, 2, 5, 6], "integ": [1, 2, 5, 6], "askforintinlist": [1, 12], "askforintinrang": [1, 12], "askforstrinlist": [1, 12], "askfortyp": [1, 12], "typecast": 1, "function": 1, "specif": [1, 5], "data": [1, 5], "If": [1, 2, 5, 6], "again": 1, "datatyp": 1, "cast": 1, "ex": 1, "_castint": 1, "_castfloat": 1, "_caststr": 1, "askfortypeinlist": [1, 12], "askfortypeinrang": [1, 12], "numer": 1, "between": 1, "two": [1, 5], "number": [1, 2, 5, 6], "askyn": [1, 12], "question": 1, "y": 1, "n": 1, "bool": [1, 2, 5, 6], "ye": 1, "true": [1, 2, 5, 6], "fals": [1, 2, 5, 6], "castfloat": [1, 12], "argument": [1, 2, 5], "castint": [1, 12], "caststr": [1, 12], "pod_command": [2, 12], "manag": 2, "dictionari": 2, "avail": [2, 6], "command": [2, 5], "__name": [2, 12], "level": [2, 6], "repres": [2, 5], "index": [2, 11], "kei": 2, "name": [2, 6], "__command": [2, 12], "__argument": [2, 12], "byte": [2, 5, 6], "__return": [2, 12], "__binari": [2, 12], "binari": [2, 5], "flag": [2, 5], "__novalu": [2, 12], "mark": [2, 5], "item": [2, 5], "mean": 2, "undefin": 2, "__u8": [2, 12], "hexadecim": [2, 5], "charact": [2, 5, 6], "unsign": [2, 5], "8": 2, "bit": [2, 5], "__u16": [2, 12], "16": [2, 5], "each": [2, 5], "entri": 2, "format": 2, "ascii": [2, 5], "dict": 2, "tupl": [2, 5], "addcommand": [2, 12], "commandnumb": [2, 5], "commandnam": 2, "argumentbyt": 2, "returnbyt": 2, "isbinari": 2, "add": 2, "current": 2, "doe": [2, 5, 6], "boolean": [2, 5], "standard": [2, 5], "wa": 2, "successfulli": 2, "ad": 2, "could": 2, "becaus": 2, "alreadi": 2, "argumenthexchar": [2, 12], "cmd": 2, "hex": 2, "found": 2, "commandnumberfromnam": [2, 12], "doescommandexist": [2, 12], "check": 2, "otherwis": [2, 6], "getbasiccommand": [2, 12], "creat": [2, 5], "basic": 2, "set": [2, 6], "0": 2, "1": [2, 5], "2": [2, 5], "3": 2, "4": [2, 5], "5": 2, "6": 2, "7": 2, "9": 2, "10": 2, "11": 2, "12": 2, "thi": [2, 5], "getcommand": [2, 12], "content": 2, "iscommandbinari": [2, 12], "novalu": [2, 12], "removecommand": [2, 12], "remov": [2, 5], "restorebasiccommand": [2, 12], "returnhexchar": [2, 12], "u16": [2, 12], "u8": [2, 12], "pod_packet": [5, 12], "collect": 5, "interpret": 5, "packet": 5, "asciibytestoint_split": [5, 12], "msg": 5, "keeptopbit": 5, "cutbottombit": 5, "convert": 5, "encod": 5, "hold": 5, "inform": 5, "posit": 5, "msb": 5, "desir": 5, "lsb": 5, "result": 5, "asciibytestoint": [5, 12], "msg_b": 5, "sign": 5, "It": 5, "convers": 5, "neg": 5, "complement": 5, "The": 5, "must": 5, "fail": 5, "binarybytestoint": [5, 12], "byteord": 5, "big": 5, "order": 5, "endian": 5, "littl": 5, "binarybytestoint_split": [5, 12], "buildpodpacket_standard": [5, 12], "payload": 5, "build": 5, "stx": [5, 12], "checksum": [5, 12], "etx": [5, 12], "long": 5, "complet": [5, 6], "bytesin": 5, "calcul": 5, "achiev": 5, "sum": 5, "invert": 5, "take": 5, "last": 5, "transmiss": 5, "0x03": 5, "inttoasciibyt": [5, 12], "numchar": 5, "first": [5, 6], "usabl": 5, "uppercas": 5, "Then": [5, 6], "lastli": 5, "ensur": 5, "final": 5, "length": 5, "exampl": 5, "numbyt": [5, 6], "show": 5, "b": 5, "0002": 5, "which": 5, "0x30": 5, "0x32": 5, "val": 5, "ar": 5, "payloadtobyt": [5, 12], "argsiz": 5, "size": 5, "rais": [5, 6], "except": [5, 6], "requir": 5, "multipl": 5, "wrong": 5, "ha": 5, "incorrect": 5, "start": 5, "0x02": 5, "twoscompl": [5, 12], "nbit": 5, "com_io": [6, 12], "port": 6, "baudrat": 6, "9600": 6, "handl": 6, "serial": 6, "commun": 6, "read": [6, 12], "write": [6, 12], "com": 6, "__serialinst": [6, 12], "instanc": 6, "closeserialport": [6, 12], "close": 6, "open": 6, "getcomportslist": [6, 12], "find": 6, "all": 6, "comput": 6, "them": 6, "access": 6, "getportnam": [6, 12], "isserialclos": [6, 12], "isserialopen": [6, 12], "openserialport": [6, 12], "baud": 6, "rate": 6, "specifi": 6, "readlin": [6, 12], "until": 6, "new": 6, "line": 6, "readuntil": [6, 12], "eol": 6, "setbaudr": [6, 12], "modul": 11, "basicpodprotocol": [11, 12], "getuserinput": [11, 12], "podcommand": [11, 12], "poddevice_8206hr": [11, 12], "poddevice_8401hr": [11, 12], "podpackethandl": [11, 12], "serialcommun": [11, 12], "setup_8206hr": [11, 12], "setup_8401hr": [11, 12], "setup_poddevic": [11, 12], "setup_podinterfac": [11, 12], "search": 11, "page": 11}, "objects": {"Code.Modules": [[1, 0, 0, "-", "GetUserInput"], [2, 0, 0, "-", "PodCommands"], [5, 0, 0, "-", "PodPacketHandling"], [6, 0, 0, "-", "SerialCommunication"]], "Code.Modules.GetUserInput": [[1, 1, 1, "", "UserInput"]], "Code.Modules.GetUserInput.UserInput": [[1, 2, 1, "", "AskForFloat"], [1, 2, 1, "", "AskForFloatInList"], [1, 2, 1, "", "AskForFloatInRange"], [1, 2, 1, "", "AskForInput"], [1, 2, 1, "", "AskForInt"], [1, 2, 1, "", "AskForIntInList"], [1, 2, 1, "", "AskForIntInRange"], [1, 2, 1, "", "AskForStrInList"], [1, 2, 1, "", "AskForType"], [1, 2, 1, "", "AskForTypeInList"], [1, 2, 1, "", "AskForTypeInRange"], [1, 2, 1, "", "AskYN"], [1, 2, 1, "", "CastFloat"], [1, 2, 1, "", "CastInt"], [1, 2, 1, "", "CastStr"]], "Code.Modules.PodCommands": [[2, 1, 1, "", "POD_Commands"]], "Code.Modules.PodCommands.POD_Commands": [[2, 2, 1, "", "AddCommand"], [2, 2, 1, "", "ArgumentHexChar"], [2, 2, 1, "", "CommandNumberFromName"], [2, 2, 1, "", "DoesCommandExist"], [2, 2, 1, "", "GetBasicCommands"], [2, 2, 1, "", "GetCommands"], [2, 2, 1, "", "IsCommandBinary"], [2, 2, 1, "", "NoValue"], [2, 2, 1, "", "RemoveCommand"], [2, 2, 1, "", "RestoreBasicCommands"], [2, 2, 1, "", "ReturnHexChar"], [2, 2, 1, "", "U16"], [2, 2, 1, "", "U8"], [2, 3, 1, "", "__ARGUMENTS"], [2, 3, 1, "", "__BINARY"], [2, 3, 1, "", "__NAME"], [2, 3, 1, "", "__NOVALUE"], [2, 3, 1, "", "__RETURNS"], [2, 3, 1, "", "__U16"], [2, 3, 1, "", "__U8"], [2, 3, 1, "", "__commands"]], "Code.Modules.PodPacketHandling": [[5, 1, 1, "", "POD_Packets"]], "Code.Modules.PodPacketHandling.POD_Packets": [[5, 2, 1, "", "ASCIIbytesToInt_Split"], [5, 2, 1, "", "AsciiBytesToInt"], [5, 2, 1, "", "BinaryBytesToInt"], [5, 2, 1, "", "BinaryBytesToInt_Split"], [5, 2, 1, "", "BuildPODpacket_Standard"], [5, 2, 1, "", "Checksum"], [5, 2, 1, "", "ETX"], [5, 2, 1, "", "IntToAsciiBytes"], [5, 2, 1, "", "PayloadToBytes"], [5, 2, 1, "", "STX"], [5, 2, 1, "", "TwosComplement"]], "Code.Modules.SerialCommunication": [[6, 1, 1, "", "COM_io"]], "Code.Modules.SerialCommunication.COM_io": [[6, 2, 1, "", "CloseSerialPort"], [6, 2, 1, "", "GetCOMportsList"], [6, 2, 1, "", "GetPortName"], [6, 2, 1, "", "IsSerialClosed"], [6, 2, 1, "", "IsSerialOpen"], [6, 2, 1, "", "OpenSerialPort"], [6, 2, 1, "", "Read"], [6, 2, 1, "", "ReadLine"], [6, 2, 1, "", "ReadUntil"], [6, 2, 1, "", "SetBaudrate"], [6, 2, 1, "", "Write"], [6, 3, 1, "", "__serialInst"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"]}, "titleterms": {"basicpodprotocol": 0, "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12], "getuserinput": 1, "podcommand": 2, "poddevice_8206hr": 3, "poddevice_8401hr": 4, "podpackethandl": 5, "serialcommun": 6, "setup_8206hr": 7, "setup_8401hr": 8, "setup_poddevic": 9, "setup_podinterfac": 10, "welcom": 11, "python": 11, "pod": 11, "api": 11, "": 11, "document": 11, "content": 11, "indic": 11, "tabl": 11}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"BasicPodProtocol module": [[0, "basicpodprotocol-module"]], "GetUserInput module": [[1, "module-Code.Modules.GetUserInput"]], "PodCommands module": [[2, "module-Code.Modules.PodCommands"]], "PodDevice_8206HR module": [[3, "poddevice-8206hr-module"]], "PodDevice_8401HR module": [[4, "poddevice-8401hr-module"]], "PodPacketHandling module": [[5, "module-Code.Modules.PodPacketHandling"]], "SerialCommunication module": [[6, "module-Code.Modules.SerialCommunication"]], "Setup_8206HR module": [[7, "setup-8206hr-module"]], "Setup_8401HR module": [[8, "setup-8401hr-module"]], "Setup_PodDevices module": [[9, "setup-poddevices-module"]], "Setup_PodInterface module": [[10, "setup-podinterface-module"]], "Welcome to Python POD API\u2019s documentation!": [[11, "welcome-to-python-pod-api-s-documentation"]], "Contents:": [[11, null]], "Indices and tables": [[11, "indices-and-tables"]], "Modules": [[12, "modules"]]}, "indexentries": {"askforfloat() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForFloat"]], "askforfloatinlist() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForFloatInList"]], "askforfloatinrange() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForFloatInRange"]], "askforinput() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForInput"]], "askforint() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForInt"]], "askforintinlist() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForIntInList"]], "askforintinrange() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForIntInRange"]], "askforstrinlist() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForStrInList"]], "askfortype() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForType"]], "askfortypeinlist() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForTypeInList"]], "askfortypeinrange() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskForTypeInRange"]], "askyn() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.AskYN"]], "castfloat() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.CastFloat"]], "castint() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.CastInt"]], "caststr() (code.modules.getuserinput.userinput static method)": [[1, "Code.Modules.GetUserInput.UserInput.CastStr"]], "code.modules.getuserinput": [[1, "module-Code.Modules.GetUserInput"]], "userinput (class in code.modules.getuserinput)": [[1, "Code.Modules.GetUserInput.UserInput"]], "module": [[1, "module-Code.Modules.GetUserInput"], [2, "module-Code.Modules.PodCommands"], [5, "module-Code.Modules.PodPacketHandling"], [6, "module-Code.Modules.SerialCommunication"]], "addcommand() (code.modules.podcommands.pod_commands method)": [[2, "Code.Modules.PodCommands.POD_Commands.AddCommand"]], "argumenthexchar() (code.modules.podcommands.pod_commands method)": [[2, "Code.Modules.PodCommands.POD_Commands.ArgumentHexChar"]], "code.modules.podcommands": [[2, "module-Code.Modules.PodCommands"]], "commandnumberfromname() (code.modules.podcommands.pod_commands method)": [[2, "Code.Modules.PodCommands.POD_Commands.CommandNumberFromName"]], "doescommandexist() (code.modules.podcommands.pod_commands method)": [[2, "Code.Modules.PodCommands.POD_Commands.DoesCommandExist"]], "getbasiccommands() (code.modules.podcommands.pod_commands static method)": [[2, "Code.Modules.PodCommands.POD_Commands.GetBasicCommands"]], "getcommands() (code.modules.podcommands.pod_commands method)": [[2, "Code.Modules.PodCommands.POD_Commands.GetCommands"]], "iscommandbinary() (code.modules.podcommands.pod_commands method)": [[2, "Code.Modules.PodCommands.POD_Commands.IsCommandBinary"]], "novalue() (code.modules.podcommands.pod_commands static method)": [[2, "Code.Modules.PodCommands.POD_Commands.NoValue"]], "pod_commands (class in code.modules.podcommands)": [[2, "Code.Modules.PodCommands.POD_Commands"]], "removecommand() (code.modules.podcommands.pod_commands method)": [[2, "Code.Modules.PodCommands.POD_Commands.RemoveCommand"]], "restorebasiccommands() (code.modules.podcommands.pod_commands method)": [[2, "Code.Modules.PodCommands.POD_Commands.RestoreBasicCommands"]], "returnhexchar() (code.modules.podcommands.pod_commands method)": [[2, "Code.Modules.PodCommands.POD_Commands.ReturnHexChar"]], "u16() (code.modules.podcommands.pod_commands static method)": [[2, "Code.Modules.PodCommands.POD_Commands.U16"]], "u8() (code.modules.podcommands.pod_commands static method)": [[2, "Code.Modules.PodCommands.POD_Commands.U8"]], "__arguments (code.modules.podcommands.pod_commands attribute)": [[2, "Code.Modules.PodCommands.POD_Commands.__ARGUMENTS"]], "__binary (code.modules.podcommands.pod_commands attribute)": [[2, "Code.Modules.PodCommands.POD_Commands.__BINARY"]], "__name (code.modules.podcommands.pod_commands attribute)": [[2, "Code.Modules.PodCommands.POD_Commands.__NAME"]], "__novalue (code.modules.podcommands.pod_commands attribute)": [[2, "Code.Modules.PodCommands.POD_Commands.__NOVALUE"]], "__returns (code.modules.podcommands.pod_commands attribute)": [[2, "Code.Modules.PodCommands.POD_Commands.__RETURNS"]], "__u16 (code.modules.podcommands.pod_commands attribute)": [[2, "Code.Modules.PodCommands.POD_Commands.__U16"]], "__u8 (code.modules.podcommands.pod_commands attribute)": [[2, "Code.Modules.PodCommands.POD_Commands.__U8"]], "__commands (code.modules.podcommands.pod_commands attribute)": [[2, "Code.Modules.PodCommands.POD_Commands.__commands"]], "asciibytestoint_split() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.ASCIIbytesToInt_Split"]], "asciibytestoint() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.AsciiBytesToInt"]], "binarybytestoint() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.BinaryBytesToInt"]], "binarybytestoint_split() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.BinaryBytesToInt_Split"]], "buildpodpacket_standard() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.BuildPODpacket_Standard"]], "checksum() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.Checksum"]], "code.modules.podpackethandling": [[5, "module-Code.Modules.PodPacketHandling"]], "etx() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.ETX"]], "inttoasciibytes() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.IntToAsciiBytes"]], "pod_packets (class in code.modules.podpackethandling)": [[5, "Code.Modules.PodPacketHandling.POD_Packets"]], "payloadtobytes() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.PayloadToBytes"]], "stx() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.STX"]], "twoscomplement() (code.modules.podpackethandling.pod_packets static method)": [[5, "Code.Modules.PodPacketHandling.POD_Packets.TwosComplement"]], "com_io (class in code.modules.serialcommunication)": [[6, "Code.Modules.SerialCommunication.COM_io"]], "closeserialport() (code.modules.serialcommunication.com_io method)": [[6, "Code.Modules.SerialCommunication.COM_io.CloseSerialPort"]], "code.modules.serialcommunication": [[6, "module-Code.Modules.SerialCommunication"]], "getcomportslist() (code.modules.serialcommunication.com_io static method)": [[6, "Code.Modules.SerialCommunication.COM_io.GetCOMportsList"]], "getportname() (code.modules.serialcommunication.com_io method)": [[6, "Code.Modules.SerialCommunication.COM_io.GetPortName"]], "isserialclosed() (code.modules.serialcommunication.com_io method)": [[6, "Code.Modules.SerialCommunication.COM_io.IsSerialClosed"]], "isserialopen() (code.modules.serialcommunication.com_io method)": [[6, "Code.Modules.SerialCommunication.COM_io.IsSerialOpen"]], "openserialport() (code.modules.serialcommunication.com_io method)": [[6, "Code.Modules.SerialCommunication.COM_io.OpenSerialPort"]], "read() (code.modules.serialcommunication.com_io method)": [[6, "Code.Modules.SerialCommunication.COM_io.Read"]], "readline() (code.modules.serialcommunication.com_io method)": [[6, "Code.Modules.SerialCommunication.COM_io.ReadLine"]], "readuntil() (code.modules.serialcommunication.com_io method)": [[6, "Code.Modules.SerialCommunication.COM_io.ReadUntil"]], "setbaudrate() (code.modules.serialcommunication.com_io method)": [[6, "Code.Modules.SerialCommunication.COM_io.SetBaudrate"]], "write() (code.modules.serialcommunication.com_io method)": [[6, "Code.Modules.SerialCommunication.COM_io.Write"]], "__serialinst (code.modules.serialcommunication.com_io attribute)": [[6, "Code.Modules.SerialCommunication.COM_io.__serialInst"]]}})